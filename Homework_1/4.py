'''
Сложность: O(n*log(n)) + O(n) + O(n) ==> O(n*log(n))
Алгоритм находит минимальный модуль (одинаковых) разницы между 2 числами
зписывает значение в виде списка с двумя этими числами
'''


def minimumAbsDifference(arr):
    arr.sort()  # Применяем сортировку
    para = []  # Создаем список для пар, огромное число для замены и словать
    diff = 10**10  # Создаем, большое число для того чтобы использовать в качестве замены
    dct = {}  # Создаем словать
    for i in range(len(arr) - 1):  # Запускаем цикл по длине списка для поиска минимальной разницы
        diff = min(diff, abs(arr[i] - arr[i + 1]))  # Записываем в diff  значение diff или модуль разницы двух соседнихчисел
        if arr[i] in dct:  # Если наше число в словаре
            dct[arr[i]] += 1  # Прибавить 1
        else:
            dct[arr[i]] = 1  # Иначе перзаписываем значение как 1
    if arr[-1] in dct:  # Если число в словаре
        dct[arr[-1]] += 1  # Прибавить 1
    else:
        dct[arr[-1]] = 1  # Иначе перзаписываем значение как 1
    for i in range(len(arr)):  # Запускаем цикл по длине масива
        if arr[i] + diff in dct:  # Если чило + разница есть  в словаре
            para.append([arr[i], arr[i] + diff]) # Добавляем пары пары
    return para  # Возвращаем список пар

print(minimumAbsDifference([3,8,-10,23,19,-4,-14,27]))